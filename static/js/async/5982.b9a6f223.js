"use strict";(self.webpackChunklcm_test_page=self.webpackChunklcm_test_page||[]).push([["5982"],{54:function(e,n,t){t.r(n),t.d(n,{default:()=>d});var s=t(5893),i=t(65);function r(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",code:"code",pre:"pre",h3:"h3",ul:"ul",li:"li"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"integration-tests",children:["Integration Tests",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#integration-tests",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"This document provides information about the integration testing framework used in this project."}),"\n",(0,s.jsxs)(n.h2,{id:"overview",children:["Overview",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#overview",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"The integration tests are designed to validate the end-to-end functionality of the VeCLI. They execute the built binary in a controlled environment and verify that it behaves as expected when interacting with the file system."}),"\n",(0,s.jsxs)(n.p,{children:["These tests are located in the ",(0,s.jsx)(n.code,{children:"integration-tests"})," directory and are run using a custom test runner."]}),"\n",(0,s.jsxs)(n.h2,{id:"running-the-tests",children:["Running the tests",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#running-the-tests",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["The integration tests are not run as part of the default ",(0,s.jsx)(n.code,{children:"npm run test"})," command. They must be run explicitly using the ",(0,s.jsx)(n.code,{children:"npm run test:integration:all"})," script."]}),"\n",(0,s.jsx)(n.p,{children:"The integration tests can also be run using the following shortcut:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run test:e2e\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"running-a-specific-set-of-tests",children:["Running a specific set of tests",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#running-a-specific-set-of-tests",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["To run a subset of test files, you can use ",(0,s.jsx)(n.code,{children:"npm run <integration test command> <file_name1> ...."})," where "," is either ",(0,s.jsx)(n.code,{children:"test:e2e"})," or ",(0,s.jsx)(n.code,{children:"test:integration*"})," and ",(0,s.jsx)(n.code,{children:"<file_name>"})," is any of the ",(0,s.jsx)(n.code,{children:".test.js"})," files in the ",(0,s.jsx)(n.code,{children:"integration-tests/"})," directory. For example, the following command runs ",(0,s.jsx)(n.code,{children:"list_directory.test.js"})," and ",(0,s.jsx)(n.code,{children:"write_file.test.js"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run test:e2e list_directory write_file\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"running-a-single-test-by-name",children:["Running a single test by name",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#running-a-single-test-by-name",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["To run a single test by its name, use the ",(0,s.jsx)(n.code,{children:"--test-name-pattern"})," flag:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'npm run test:e2e -- --test-name-pattern "reads a file"\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"running-all-tests",children:["Running all tests",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#running-all-tests",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"To run the entire suite of integration tests, use the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run test:integration:all\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"sandbox-matrix",children:["Sandbox matrix",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sandbox-matrix",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"all"})," command will run tests for ",(0,s.jsx)(n.code,{children:"no sandboxing"}),", ",(0,s.jsx)(n.code,{children:"docker"})," and ",(0,s.jsx)(n.code,{children:"podman"}),".\nEach individual type can be run using the following commands:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run test:integration:sandbox:none\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run test:integration:sandbox:docker\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run test:integration:sandbox:podman\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"diagnostics",children:["Diagnostics",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#diagnostics",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"The integration test runner provides several options for diagnostics to help track down test failures."}),"\n",(0,s.jsxs)(n.h3,{id:"keeping-test-output",children:["Keeping test output",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#keeping-test-output",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"You can preserve the temporary files created during a test run for inspection. This is useful for debugging issues with file system operations."}),"\n",(0,s.jsxs)(n.p,{children:["To keep the test output set the ",(0,s.jsx)(n.code,{children:"KEEP_OUTPUT"})," environment variable to ",(0,s.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"KEEP_OUTPUT=true npm run test:integration:sandbox:none\n"})}),"\n",(0,s.jsx)(n.p,{children:"When output is kept, the test runner will print the path to the unique directory for the test run."}),"\n",(0,s.jsxs)(n.h3,{id:"verbose-output",children:["Verbose output",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#verbose-output",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["For more detailed debugging, set the ",(0,s.jsx)(n.code,{children:"VERBOSE"})," environment variable to ",(0,s.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"VERBOSE=true npm run test:integration:sandbox:none\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When using ",(0,s.jsx)(n.code,{children:"VERBOSE=true"})," and ",(0,s.jsx)(n.code,{children:"KEEP_OUTPUT=true"})," in the same command, the output is streamed to the console and also saved to a log file within the test's temporary directory."]}),"\n",(0,s.jsx)(n.p,{children:"The verbose output is formatted to clearly identify the source of the logs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"--- TEST: <log dir>:<test-name> ---\n... output from the gemini command ...\n--- END TEST: <log dir>:<test-name> ---\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"linting-and-formatting",children:["Linting and formatting",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#linting-and-formatting",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"To ensure code quality and consistency, the integration test files are linted as part of the main build process. You can also manually run the linter and auto-fixer."}),"\n",(0,s.jsxs)(n.h3,{id:"running-the-linter",children:["Running the linter",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#running-the-linter",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"To check for linting errors, run the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run lint\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can include the ",(0,s.jsx)(n.code,{children:":fix"})," flag in the command to automatically fix any fixable linting errors:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run lint:fix\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"directory-structure",children:["Directory structure",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#directory-structure",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["The integration tests create a unique directory for each test run inside the ",(0,s.jsx)(n.code,{children:".integration-tests"})," directory. Within this directory, a subdirectory is created for each test file, and within that, a subdirectory is created for each individual test case."]}),"\n",(0,s.jsx)(n.p,{children:"This structure makes it easy to locate the artifacts for a specific test run, file, or case."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:".integration-tests/\n└── <run-id>/\n    └── <test-file-name>.test.js/\n        └── <test-case-name>/\n            ├── output.log\n            └── ...other test artifacts...\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"continuous-integration",children:["Continuous integration",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#continuous-integration",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["To ensure the integration tests are always run, a GitHub Actions workflow is defined in ",(0,s.jsx)(n.code,{children:".github/workflows/e2e.yml"}),". This workflow automatically runs the integrations tests for pull requests against the ",(0,s.jsx)(n.code,{children:"main"})," branch, or when a pull request is added to a merge queue."]}),"\n",(0,s.jsx)(n.p,{children:"The workflow runs the tests in different sandboxing environments to ensure VeCLI is tested across each:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"sandbox:none"}),": Runs the tests without any sandboxing."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"sandbox:docker"}),": Runs the tests in a Docker container."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"sandbox:podman"}),": Runs the tests in a Podman container."]}),"\n"]})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}let d=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["en%2Fintegration-tests.md"]={toc:[{text:"Overview",id:"overview",depth:2},{text:"Running the tests",id:"running-the-tests",depth:2},{text:"Running a specific set of tests",id:"running-a-specific-set-of-tests",depth:2},{text:"Running a single test by name",id:"running-a-single-test-by-name",depth:3},{text:"Running all tests",id:"running-all-tests",depth:3},{text:"Sandbox matrix",id:"sandbox-matrix",depth:3},{text:"Diagnostics",id:"diagnostics",depth:2},{text:"Keeping test output",id:"keeping-test-output",depth:3},{text:"Verbose output",id:"verbose-output",depth:3},{text:"Linting and formatting",id:"linting-and-formatting",depth:2},{text:"Running the linter",id:"running-the-linter",depth:3},{text:"Directory structure",id:"directory-structure",depth:2},{text:"Continuous integration",id:"continuous-integration",depth:2}],title:"Integration Tests",headingTitle:"Integration Tests",frontmatter:{}}}}]);
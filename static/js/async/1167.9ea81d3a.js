"use strict";(self.webpackChunklcm_test_page=self.webpackChunklcm_test_page||[]).push([["1167"],{2455:function(e,n,o){o.r(n),o.d(n,{default:()=>i});var t=o(5893),r=o(65);function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",pre:"pre"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"example-proxy-script",children:["Example Proxy Script",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#example-proxy-script",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["The following is an example of a proxy script that can be used with the ",(0,t.jsx)(n.code,{children:"GEMINI_SANDBOX_PROXY_COMMAND"})," environment variable. This script only allows ",(0,t.jsx)(n.code,{children:"HTTPS"})," connections to ",(0,t.jsx)(n.code,{children:"example.com:443"})," and declines all other requests."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"#!/usr/bin/env node\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Example proxy server that listens on :::8877 and only allows HTTPS connections to example.com.\n// Set `GEMINI_SANDBOX_PROXY_COMMAND=scripts/example-proxy.js` to run proxy alongside sandbox\n// Test via `curl https://example.com` inside sandbox (in shell mode or via shell tool)\n\nimport http from 'node:http';\nimport net from 'node:net';\nimport { URL } from 'node:url';\nimport console from 'node:console';\n\nconst PROXY_PORT = 8877;\nconst ALLOWED_DOMAINS = ['example.com', 'googleapis.com'];\nconst ALLOWED_PORT = '443';\n\nconst server = http.createServer((req, res) => {\n  // Deny all requests other than CONNECT for HTTPS\n  console.log(\n    `[PROXY] Denying non-CONNECT request for: ${req.method} ${req.url}`,\n  );\n  res.writeHead(405, { 'Content-Type': 'text/plain' });\n  res.end('Method Not Allowed');\n});\n\nserver.on('connect', (req, clientSocket, head) => {\n  // req.url will be in the format \"hostname:port\" for a CONNECT request.\n  const { port, hostname } = new URL(`http://${req.url}`);\n\n  console.log(`[PROXY] Intercepted CONNECT request for: ${hostname}:${port}`);\n\n  if (\n    ALLOWED_DOMAINS.some(\n      (domain) => hostname == domain || hostname.endsWith(`.${domain}`),\n    ) &&\n    port === ALLOWED_PORT\n  ) {\n    console.log(`[PROXY] Allowing connection to ${hostname}:${port}`);\n\n    // Establish a TCP connection to the original destination.\n    const serverSocket = net.connect(port, hostname, () => {\n      clientSocket.write('HTTP/1.1 200 Connection Established\\r\\n\\r\\n');\n      // Create a tunnel by piping data between the client and the destination server.\n      serverSocket.write(head);\n      serverSocket.pipe(clientSocket);\n      clientSocket.pipe(serverSocket);\n    });\n\n    serverSocket.on('error', (err) => {\n      console.error(`[PROXY] Error connecting to destination: ${err.message}`);\n      clientSocket.end(`HTTP/1.1 502 Bad Gateway\\r\\n\\r\\n`);\n    });\n  } else {\n    console.log(`[PROXY] Denying connection to ${hostname}:${port}`);\n    clientSocket.end('HTTP/1.1 403 Forbidden\\r\\n\\r\\n');\n  }\n\n  clientSocket.on('error', (err) => {\n    // This can happen if the client hangs up.\n    console.error(`[PROXY] Client socket error: ${err.message}`);\n  });\n});\n\nserver.listen(PROXY_PORT, () => {\n  const address = server.address();\n  console.log(`[PROXY] Proxy listening on ${address.address}:${address.port}`);\n  console.log(\n    `[PROXY] Allowing HTTPS connections to domains: ${ALLOWED_DOMAINS.join(', ')}`,\n  );\n});\n"})})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(s,{...e})}):s(e)}let i=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["examples%2Fproxy-script.md"]={toc:[],title:"Example Proxy Script",headingTitle:"Example Proxy Script",frontmatter:{}}}}]);
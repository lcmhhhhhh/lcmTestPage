"use strict";(self.webpackChunklcm_test_page=self.webpackChunklcm_test_page||[]).push([["7275"],{127:function(e,n,s){s.r(n),s.d(n,{default:()=>r});var l=s(5893),c=s(65);function d(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",ul:"ul",li:"li",strong:"strong",ol:"ol"},(0,c.ah)(),e.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.h1,{id:"vecli-核心工具-api",children:["VeCLI 核心：工具 API",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vecli-核心工具-api",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["VeCLI 核心 (",(0,l.jsx)(n.code,{children:"packages/core"}),") 具有一个强大的系统，用于定义、注册和执行工具。这些工具扩展了火山引擎模型的功能，使其能够与本地环境交互、获取网络内容并执行各种超越简单文本生成的操作。"]}),"\n",(0,l.jsxs)(n.h2,{id:"核心概念",children:["核心概念",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#核心概念",children:"#"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsxs)(n.strong,{children:["工具 (",(0,l.jsx)(n.code,{children:"tools.ts"}),"):"]})," 一个接口和基类 (",(0,l.jsx)(n.code,{children:"BaseTool"}),")，它定义了所有工具的契约。每个工具必须具有："]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"name"}),": 一个唯一的内部名称（在调用火山引擎 API 时使用）。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"displayName"}),": 一个用户友好的名称。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"description"}),": 对工具功能的清晰解释，该解释将提供给火山引擎模型。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"parameterSchema"}),": 定义工具接受的参数的 JSON 模式。这对于火山引擎模型理解如何正确调用工具至关重要。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"validateToolParams()"}),": 一个用于验证传入参数的方法。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"getDescription()"}),": 一个在执行前提供工具将使用特定参数执行什么操作的用户可读描述的方法。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"shouldConfirmExecute()"}),": 一个用于确定执行前是否需要用户确认的方法（例如，对于潜在的破坏性操作）。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"execute()"}),": 执行工具操作并返回 ",(0,l.jsx)(n.code,{children:"ToolResult"})," 的核心方法。"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsxs)(n.strong,{children:[(0,l.jsx)(n.code,{children:"ToolResult"})," (",(0,l.jsx)(n.code,{children:"tools.ts"}),"):"]})," 定义工具执行结果结构的接口："]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"llmContent"}),": 要包含在发送回 LLM 以供上下文使用的历史记录中的事实内容。这可以是一个简单的字符串或 ",(0,l.jsx)(n.code,{children:"PartListUnion"}),"（一个 ",(0,l.jsx)(n.code,{children:"Part"})," 对象和字符串的数组）以支持富内容。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"returnDisplay"}),": 一个用户友好的字符串（通常是 Markdown）或特殊对象（如 ",(0,l.jsx)(n.code,{children:"FileDiff"}),"），用于在 CLI 中显示。"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"返回富内容:"})," 工具不仅限于返回简单文本。",(0,l.jsx)(n.code,{children:"llmContent"})," 可以是一个 ",(0,l.jsx)(n.code,{children:"PartListUnion"}),"，它是一个可以包含 ",(0,l.jsx)(n.code,{children:"Part"})," 对象（用于图像、音频等）和 ",(0,l.jsx)(n.code,{children:"string"})," 的混合数组。这允许单个工具执行返回多个富内容片段。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsxs)(n.strong,{children:["工具注册表 (",(0,l.jsx)(n.code,{children:"tool-registry.ts"}),"):"]})," 一个类 (",(0,l.jsx)(n.code,{children:"ToolRegistry"}),")，负责："]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"注册工具:"})," 持有所有可用内置工具的集合（例如，",(0,l.jsx)(n.code,{children:"ReadFileTool"}),"、",(0,l.jsx)(n.code,{children:"ShellTool"}),"）。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"发现工具:"})," 它还可以动态发现工具：","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"基于命令的发现:"})," 如果在设置中配置了 ",(0,l.jsx)(n.code,{children:"tools.discoveryCommand"}),"，则会执行此命令。它应该输出描述自定义工具的 JSON，然后将这些工具注册为 ",(0,l.jsx)(n.code,{children:"DiscoveredTool"})," 实例。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"基于 MCP 的发现:"})," 如果配置了 ",(0,l.jsx)(n.code,{children:"mcp.serverCommand"}),"，注册表可以连接到模型上下文协议 (MCP) 服务器以列出和注册工具 (",(0,l.jsx)(n.code,{children:"DiscoveredMCPTool"}),")。"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"提供模式:"})," 将所有已注册工具的 ",(0,l.jsx)(n.code,{children:"FunctionDeclaration"})," 模式暴露给火山引擎模型，以便它知道哪些工具可用以及如何使用它们。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"检索工具:"})," 允许核心通过名称获取特定工具以供执行。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"内置工具",children:["内置工具",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#内置工具",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["核心包含一套预定义的工具，通常位于 ",(0,l.jsx)(n.code,{children:"packages/core/src/tools/"})," 中。这些工具包括："]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"文件系统工具:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"LSTool"})," (",(0,l.jsx)(n.code,{children:"ls.ts"}),"): 列出目录内容。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"ReadFileTool"})," (",(0,l.jsx)(n.code,{children:"read-file.ts"}),"): 读取单个文件的内容。它接受一个 ",(0,l.jsx)(n.code,{children:"absolute_path"})," 参数，该参数必须是绝对路径。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"WriteFileTool"})," (",(0,l.jsx)(n.code,{children:"write-file.ts"}),"): 将内容写入文件。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GrepTool"})," (",(0,l.jsx)(n.code,{children:"grep.ts"}),"): 在文件中搜索模式。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"GlobTool"})," (",(0,l.jsx)(n.code,{children:"glob.ts"}),"): 查找与 glob 模式匹配的文件。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"EditTool"})," (",(0,l.jsx)(n.code,{children:"edit.ts"}),"): 对文件执行就地修改（通常需要确认）。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"ReadManyFilesTool"})," (",(0,l.jsx)(n.code,{children:"read-many-files.ts"}),"): 从多个文件或 glob 模式读取并连接内容（在 CLI 中由 ",(0,l.jsx)(n.code,{children:"@"})," 命令使用）。"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"执行工具:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"ShellTool"})," (",(0,l.jsx)(n.code,{children:"shell.ts"}),"): 执行任意 shell 命令（需要仔细的沙盒和用户确认）。"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"网络工具:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"WebFetchTool"})," (",(0,l.jsx)(n.code,{children:"web-fetch.ts"}),"): 从 URL 获取内容。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"WebSearchTool"})," (",(0,l.jsx)(n.code,{children:"web-search.ts"}),"): 执行网络搜索。"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"内存工具:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"MemoryTool"})," (",(0,l.jsx)(n.code,{children:"memoryTool.ts"}),"): 与 AI 的内存交互。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["这些工具都扩展了 ",(0,l.jsx)(n.code,{children:"BaseTool"})," 并实现了其特定功能所需的方法。"]}),"\n",(0,l.jsxs)(n.h2,{id:"工具执行流程",children:["工具执行流程",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#工具执行流程",children:"#"})]}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"模型请求:"})," 火山引擎模型根据用户的提示和提供的工具模式，决定使用一个工具，并在其响应中返回一个 ",(0,l.jsx)(n.code,{children:"FunctionCall"})," 部分，指定工具名称和参数。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"核心接收请求:"})," 核心解析此 ",(0,l.jsx)(n.code,{children:"FunctionCall"}),"。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"工具检索:"})," 它在 ",(0,l.jsx)(n.code,{children:"ToolRegistry"})," 中查找请求的工具。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"参数验证:"})," 调用工具的 ",(0,l.jsx)(n.code,{children:"validateToolParams()"})," 方法。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"确认 (如果需要):"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["调用工具的 ",(0,l.jsx)(n.code,{children:"shouldConfirmExecute()"})," 方法。"]}),"\n",(0,l.jsx)(n.li,{children:"如果它返回确认详情，核心会将其传达回 CLI，CLI 会提示用户。"}),"\n",(0,l.jsx)(n.li,{children:"用户的决定（例如，继续、取消）会被发送回核心。"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"执行:"})," 如果已验证并确认（或者如果不需要确认），核心会使用提供的参数和 ",(0,l.jsx)(n.code,{children:"AbortSignal"}),"（用于潜在取消）调用工具的 ",(0,l.jsx)(n.code,{children:"execute()"})," 方法。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"结果处理:"})," 从 ",(0,l.jsx)(n.code,{children:"execute()"})," 接收到的 ",(0,l.jsx)(n.code,{children:"ToolResult"})," 会被核心接收。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"对模型的响应:"})," ",(0,l.jsx)(n.code,{children:"ToolResult"})," 中的 ",(0,l.jsx)(n.code,{children:"llmContent"})," 会被打包为 ",(0,l.jsx)(n.code,{children:"FunctionResponse"})," 并发送回火山引擎模型，以便它能够继续生成面向用户的响应。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"向用户显示:"})," ",(0,l.jsx)(n.code,{children:"ToolResult"})," 中的 ",(0,l.jsx)(n.code,{children:"returnDisplay"})," 会被发送到 CLI 以向用户显示工具执行了什么操作。"]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"使用自定义工具扩展",children:["使用自定义工具扩展",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用自定义工具扩展",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"虽然在提供的文件中没有明确详细说明普通最终用户可以直接以编程方式注册新工具的主要工作流程，但架构通过以下方式支持扩展："}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"基于命令的发现:"})," 高级用户或项目管理员可以在 ",(0,l.jsx)(n.code,{children:"settings.json"})," 中定义 ",(0,l.jsx)(n.code,{children:"tools.discoveryCommand"}),"。当 VeCLI 核心运行此命令时，该命令应输出一个 ",(0,l.jsx)(n.code,{children:"FunctionDeclaration"})," 对象的 JSON 数组。然后核心会将这些作为 ",(0,l.jsx)(n.code,{children:"DiscoveredTool"})," 实例提供。相应的 ",(0,l.jsx)(n.code,{children:"tools.callCommand"})," 将负责实际执行这些自定义工具。"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"MCP 服务器:"})," 对于更复杂的场景，可以设置一个或多个 MCP 服务器，并通过 ",(0,l.jsx)(n.code,{children:"settings.json"})," 中的 ",(0,l.jsx)(n.code,{children:"mcpServers"})," 设置进行配置。VeCLI 核心然后可以发现并使用这些服务器暴露的工具。如前所述，如果您有多个 MCP 服务器，工具名称将使用您配置中的服务器名称作为前缀（例如，",(0,l.jsx)(n.code,{children:"serverAlias__actualToolName"}),"）。"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"此工具系统提供了一种灵活而强大的方式来增强火山引擎模型的功能，使 VeCLI 成为处理各种任务的多功能助手。"})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}let r=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["zh%2Fcore%2Ftools-api.md"]={toc:[{text:"核心概念",id:"核心概念",depth:2},{text:"内置工具",id:"内置工具",depth:2},{text:"工具执行流程",id:"工具执行流程",depth:2},{text:"使用自定义工具扩展",id:"使用自定义工具扩展",depth:2}],title:"VeCLI 核心：工具 API",headingTitle:"VeCLI 核心：工具 API",frontmatter:{}}}}]);
"use strict";(self.webpackChunklcm_test_page=self.webpackChunklcm_test_page||[]).push([["3107"],{4672:function(e,n,s){s.r(n),s.d(n,{default:()=>i});var c=s(5893),l=s(65);function r(e){let n=Object.assign({h1:"h1",code:"code",a:"a",p:"p",h2:"h2",h3:"h3",ul:"ul",li:"li",pre:"pre",strong:"strong",ol:"ol"},(0,l.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"shell-tool-run_shell_command",children:["Shell Tool (",(0,c.jsx)(n.code,{children:"run_shell_command"}),")",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#shell-tool-run_shell_command",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["This document describes the ",(0,c.jsx)(n.code,{children:"run_shell_command"})," tool for the VeCLI."]}),"\n",(0,c.jsxs)(n.h2,{id:"description",children:["Description",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#description",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["Use ",(0,c.jsx)(n.code,{children:"run_shell_command"})," to interact with the underlying system, run scripts, or perform command-line operations. ",(0,c.jsx)(n.code,{children:"run_shell_command"})," executes a given shell command. On Windows, the command will be executed with ",(0,c.jsx)(n.code,{children:"cmd.exe /c"}),". On other platforms, the command will be executed with ",(0,c.jsx)(n.code,{children:"bash -c"}),"."]}),"\n",(0,c.jsxs)(n.h3,{id:"arguments",children:["Arguments",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#arguments",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"run_shell_command"})," takes the following arguments:"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"command"})," (string, required): The exact shell command to execute."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"description"})," (string, optional): A brief description of the command's purpose, which will be shown to the user."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"directory"})," (string, optional): The directory (relative to the project root) in which to execute the command. If not provided, the command runs in the project root."]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"how-to-use-run_shell_command-with-the-vecli",children:["How to use ",(0,c.jsx)(n.code,{children:"run_shell_command"})," with the VeCLI",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#how-to-use-run_shell_command-with-the-vecli",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["When using ",(0,c.jsx)(n.code,{children:"run_shell_command"}),", the command is executed as a subprocess. ",(0,c.jsx)(n.code,{children:"run_shell_command"})," can start background processes using ",(0,c.jsx)(n.code,{children:"&"}),". The tool returns detailed information about the execution, including:"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Command"}),": The command that was executed."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Directory"}),": The directory where the command was run."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Stdout"}),": Output from the standard output stream."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Stderr"}),": Output from the standard error stream."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Error"}),": Any error message reported by the subprocess."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Exit Code"}),": The exit code of the command."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Signal"}),": The signal number if the command was terminated by a signal."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Background PIDs"}),": A list of PIDs for any background processes started."]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"Usage:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:'run_shell_command(command="Your commands.", description="Your description of the command.", directory="Your execution directory.")\n'})}),"\n",(0,c.jsxs)(n.h2,{id:"run_shell_command-examples",children:[(0,c.jsx)(n.code,{children:"run_shell_command"})," examples",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#run_shell_command-examples",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"List files in the current directory:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:'run_shell_command(command="ls -la")\n'})}),"\n",(0,c.jsx)(n.p,{children:"Run a script in a specific directory:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:'run_shell_command(command="./my_script.sh", directory="scripts", description="Run my custom script")\n'})}),"\n",(0,c.jsx)(n.p,{children:"Start a background server:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:'run_shell_command(command="npm run dev &", description="Start development server in background")\n'})}),"\n",(0,c.jsxs)(n.h2,{id:"important-notes",children:["Important notes",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#important-notes",children:"#"})]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Security:"})," Be cautious when executing commands, especially those constructed from user input, to prevent security vulnerabilities."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Interactive commands:"})," Avoid commands that require interactive user input, as this can cause the tool to hang. Use non-interactive flags if available (e.g., ",(0,c.jsx)(n.code,{children:"npm init -y"}),")."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Error handling:"})," Check the ",(0,c.jsx)(n.code,{children:"Stderr"}),", ",(0,c.jsx)(n.code,{children:"Error"}),", and ",(0,c.jsx)(n.code,{children:"Exit Code"})," fields to determine if a command executed successfully."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Background processes:"})," When a command is run in the background with ",(0,c.jsx)(n.code,{children:"&"}),", the tool will return immediately and the process will continue to run in the background. The ",(0,c.jsx)(n.code,{children:"Background PIDs"})," field will contain the process ID of the background process."]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"environment-variables",children:["Environment Variables",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#environment-variables",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["When ",(0,c.jsx)(n.code,{children:"run_shell_command"})," executes a command, it sets the ",(0,c.jsx)(n.code,{children:"GEMINI_CLI=1"})," environment variable in the subprocess's environment. This allows scripts or tools to detect if they are being run from within the VeCLI."]}),"\n",(0,c.jsxs)(n.h2,{id:"command-restrictions",children:["Command Restrictions",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#command-restrictions",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["You can restrict the commands that can be executed by the ",(0,c.jsx)(n.code,{children:"run_shell_command"})," tool by using the ",(0,c.jsx)(n.code,{children:"tools.core"})," and ",(0,c.jsx)(n.code,{children:"tools.exclude"})," settings in your configuration file."]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"tools.core"}),": To restrict ",(0,c.jsx)(n.code,{children:"run_shell_command"})," to a specific set of commands, add entries to the ",(0,c.jsx)(n.code,{children:"core"})," list under the ",(0,c.jsx)(n.code,{children:"tools"})," category in the format ",(0,c.jsx)(n.code,{children:"run_shell_command(<command>)"}),". For example, ",(0,c.jsx)(n.code,{children:'"tools": {"core": ["run_shell_command(git)"]}'})," will only allow ",(0,c.jsx)(n.code,{children:"git"})," commands. Including the generic ",(0,c.jsx)(n.code,{children:"run_shell_command"})," acts as a wildcard, allowing any command not explicitly blocked."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"tools.exclude"}),": To block specific commands, add entries to the ",(0,c.jsx)(n.code,{children:"exclude"})," list under the ",(0,c.jsx)(n.code,{children:"tools"})," category in the format ",(0,c.jsx)(n.code,{children:"run_shell_command(<command>)"}),". For example, ",(0,c.jsx)(n.code,{children:'"tools": {"exclude": ["run_shell_command(rm)"]}'})," will block ",(0,c.jsx)(n.code,{children:"rm"})," commands."]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"The validation logic is designed to be secure and flexible:"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Command Chaining Disabled"}),": The tool automatically splits commands chained with ",(0,c.jsx)(n.code,{children:"&&"}),", ",(0,c.jsx)(n.code,{children:"||"}),", or ",(0,c.jsx)(n.code,{children:";"})," and validates each part separately. If any part of the chain is disallowed, the entire command is blocked."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Prefix Matching"}),": The tool uses prefix matching. For example, if you allow ",(0,c.jsx)(n.code,{children:"git"}),", you can run ",(0,c.jsx)(n.code,{children:"git status"})," or ",(0,c.jsx)(n.code,{children:"git log"}),"."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Blocklist Precedence"}),": The ",(0,c.jsx)(n.code,{children:"tools.exclude"})," list is always checked first. If a command matches a blocked prefix, it will be denied, even if it also matches an allowed prefix in ",(0,c.jsx)(n.code,{children:"tools.core"}),"."]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"command-restriction-examples",children:["Command Restriction Examples",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#command-restriction-examples",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Allow only specific command prefixes"})}),"\n",(0,c.jsxs)(n.p,{children:["To allow only ",(0,c.jsx)(n.code,{children:"git"})," and ",(0,c.jsx)(n.code,{children:"npm"})," commands, and block all others:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-json",children:'{\n  "tools": {\n    "core": ["run_shell_command(git)", "run_shell_command(npm)"]\n  }\n}\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"git status"}),": Allowed"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"npm install"}),": Allowed"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"ls -l"}),": Blocked"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Block specific command prefixes"})}),"\n",(0,c.jsxs)(n.p,{children:["To block ",(0,c.jsx)(n.code,{children:"rm"})," and allow all other commands:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-json",children:'{\n  "tools": {\n    "core": ["run_shell_command"],\n    "exclude": ["run_shell_command(rm)"]\n  }\n}\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"rm -rf /"}),": Blocked"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"git status"}),": Allowed"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"npm install"}),": Allowed"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Blocklist takes precedence"})}),"\n",(0,c.jsxs)(n.p,{children:["If a command prefix is in both ",(0,c.jsx)(n.code,{children:"tools.core"})," and ",(0,c.jsx)(n.code,{children:"tools.exclude"}),", it will be blocked."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-json",children:'{\n  "tools": {\n    "core": ["run_shell_command(git)"],\n    "exclude": ["run_shell_command(git push)"]\n  }\n}\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"git push origin main"}),": Blocked"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"git status"}),": Allowed"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Block all shell commands"})}),"\n",(0,c.jsxs)(n.p,{children:["To block all shell commands, add the ",(0,c.jsx)(n.code,{children:"run_shell_command"})," wildcard to ",(0,c.jsx)(n.code,{children:"tools.exclude"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-json",children:'{\n  "tools": {\n    "exclude": ["run_shell_command"]\n  }\n}\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"ls -l"}),": Blocked"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"any other command"}),": Blocked"]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"security-note-for-excludetools",children:["Security Note for ",(0,c.jsx)(n.code,{children:"excludeTools"}),(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#security-note-for-excludetools",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["Command-specific restrictions in ",(0,c.jsx)(n.code,{children:"excludeTools"})," for ",(0,c.jsx)(n.code,{children:"run_shell_command"})," are based on simple string matching and can be easily bypassed. This feature is ",(0,c.jsx)(n.strong,{children:"not a security mechanism"})," and should not be relied upon to safely execute untrusted code. It is recommended to use ",(0,c.jsx)(n.code,{children:"coreTools"})," to explicitly select commands\nthat can be executed."]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(r,{...e})}):r(e)}let i=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["tools%2Fshell.md"]={toc:[{text:"Description",id:"description",depth:2},{text:"Arguments",id:"arguments",depth:3},{text:"How to use `run_shell_command` with the VeCLI",id:"how-to-use-run_shell_command-with-the-vecli",depth:2},{text:"`run_shell_command` examples",id:"run_shell_command-examples",depth:2},{text:"Important notes",id:"important-notes",depth:2},{text:"Environment Variables",id:"environment-variables",depth:2},{text:"Command Restrictions",id:"command-restrictions",depth:2},{text:"Command Restriction Examples",id:"command-restriction-examples",depth:3},{text:"Security Note for `excludeTools`",id:"security-note-for-excludetools",depth:2}],title:"Shell Tool (`run_shell_command`)",headingTitle:"Shell Tool (`run_shell_command`)",frontmatter:{}}}}]);
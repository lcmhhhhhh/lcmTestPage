"use strict";(self.webpackChunklcm_test_page=self.webpackChunklcm_test_page||[]).push([["3761"],{3912:function(e,n,r){r.r(n),r.d(n,{default:()=>l});var o=r(5893),t=r(65);function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",pre:"pre"},(0,t.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h1,{id:"示例代理脚本",children:["示例代理脚本",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例代理脚本",children:"#"})]}),"\n",(0,o.jsxs)(n.p,{children:["以下是可与 ",(0,o.jsx)(n.code,{children:"VECLI_SANDBOX_PROXY_COMMAND"})," 环境变量一起使用的代理脚本示例。此脚本仅允许到 ",(0,o.jsx)(n.code,{children:"example.com:443"})," 的 ",(0,o.jsx)(n.code,{children:"HTTPS"})," 连接，并拒绝所有其他请求。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"#!/usr/bin/env node\n\n/**\n * @license\n * Copyright 2025 Volcengine LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// 监听 :::8877 的示例代理服务器，仅允许到 example.com 的 HTTPS 连接。\n// 设置 `VECLI_SANDBOX_PROXY_COMMAND=scripts/example-proxy.js` 以在沙盒旁边运行代理\n// 通过在沙盒内（在 shell 模式下或通过 shell 工具）使用 `curl https://example.com` 进行测试\n\nimport http from 'node:http';\nimport net from 'node:net';\nimport { URL } from 'node:url';\nimport console from 'node:console';\n\nconst PROXY_PORT = 8877;\nconst ALLOWED_DOMAINS = ['example.com', 'volcengineapis.com'];\nconst ALLOWED_PORT = '443';\n\nconst server = http.createServer((req, res) => {\n  // 拒绝除 CONNECT 以外的所有请求（用于 HTTPS）\n  console.log(\n    `[PROXY] 拒绝非 CONNECT 请求：${req.method} ${req.url}`,\n  );\n  res.writeHead(405, { 'Content-Type': 'text/plain' });\n  res.end('Method Not Allowed');\n});\n\nserver.on('connect', (req, clientSocket, head) => {\n  // 对于 CONNECT 请求，req.url 的格式将是 \"hostname:port\"。\n  const { port, hostname } = new URL(`http://${req.url}`);\n\n  console.log(`[PROXY] 拦截到的 CONNECT 请求：${hostname}:${port}`);\n\n  if (\n    ALLOWED_DOMAINS.some(\n      (domain) => hostname == domain || hostname.endsWith(`.${domain}`),\n    ) &&\n    port === ALLOWED_PORT\n  ) {\n    console.log(`[PROXY] 允许连接到 ${hostname}:${port}`);\n\n    // 建立到原始目标的 TCP 连接。\n    const serverSocket = net.connect(port, hostname, () => {\n      clientSocket.write('HTTP/1.1 200 Connection Established\\r\\n\\r\\n');\n      // 通过在客户端和目标服务器之间传输数据来创建隧道。\n      serverSocket.write(head);\n      serverSocket.pipe(clientSocket);\n      clientSocket.pipe(serverSocket);\n    });\n\n    serverSocket.on('error', (err) => {\n      console.error(`[PROXY] 连接到目标时出错: ${err.message}`);\n      clientSocket.end(`HTTP/1.1 502 Bad Gateway\\r\\n\\r\\n`);\n    });\n  } else {\n    console.log(`[PROXY] 拒绝连接到 ${hostname}:${port}`);\n    clientSocket.end('HTTP/1.1 403 Forbidden\\r\\n\\r\\n');\n  }\n\n  clientSocket.on('error', (err) => {\n    // 如果客户端挂断，可能会发生这种情况。\n    console.error(`[PROXY] 客户端套接字错误: ${err.message}`);\n  });\n});\n\nserver.listen(PROXY_PORT, () => {\n  const address = server.address();\n  console.log(`[PROXY] 代理监听在 ${address.address}:${address.port}`);\n  console.log(\n    `[PROXY] 允许 HTTPS 连接到域: ${ALLOWED_DOMAINS.join(', ')}`,\n  );\n});\n"})})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(s,{...e})}):s(e)}let l=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["zh%2Fexamples%2Fproxy-script.md"]={toc:[],title:"示例代理脚本",headingTitle:"示例代理脚本",frontmatter:{}}}}]);
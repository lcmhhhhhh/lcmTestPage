"use strict";(self.webpackChunklcm_test_page=self.webpackChunklcm_test_page||[]).push([["349"],{782:function(e,n,i){i.r(n),i.d(n,{default:()=>t});var s=i(5893),l=i(65);function r(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",h2:"h2",code:"code",h3:"h3",ol:"ol",li:"li",ul:"ul",em:"em",pre:"pre"},(0,l.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"gemini-cli-observability-guide",children:["Gemini CLI Observability Guide",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#gemini-cli-observability-guide",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Telemetry provides data about Gemini CLI's performance, health, and usage. By enabling it, you can monitor operations, debug issues, and optimize tool usage through traces, metrics, and structured logs."}),"\n",(0,s.jsxs)(n.p,{children:["Gemini CLI's telemetry system is built on the ",(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.a,{href:"https://opentelemetry.io/",target:"_blank",rel:"noopener noreferrer",children:"OpenTelemetry"})," (OTEL)"]})," standard, allowing you to send data to any compatible backend."]}),"\n",(0,s.jsxs)(n.h2,{id:"enabling-telemetry",children:["Enabling telemetry",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#enabling-telemetry",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["You can enable telemetry in multiple ways. Configuration is primarily managed via the ",(0,s.jsxs)(n.a,{href:"/cli/configuration",children:[(0,s.jsx)(n.code,{children:".gemini/settings.json"})," file"]})," and environment variables, but CLI flags can override these settings for a specific session."]}),"\n",(0,s.jsxs)(n.h3,{id:"order-of-precedence",children:["Order of precedence",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#order-of-precedence",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"The following lists the precedence for applying telemetry settings, with items listed higher having greater precedence:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["CLI flags (for ",(0,s.jsx)(n.code,{children:"gemini"})," command):"]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--telemetry"})," / ",(0,s.jsx)(n.code,{children:"--no-telemetry"}),": Overrides ",(0,s.jsx)(n.code,{children:"telemetry.enabled"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--telemetry-target <local|gcp>"}),": Overrides ",(0,s.jsx)(n.code,{children:"telemetry.target"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--telemetry-otlp-endpoint <URL>"}),": Overrides ",(0,s.jsx)(n.code,{children:"telemetry.otlpEndpoint"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--telemetry-log-prompts"})," / ",(0,s.jsx)(n.code,{children:"--no-telemetry-log-prompts"}),": Overrides ",(0,s.jsx)(n.code,{children:"telemetry.logPrompts"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--telemetry-outfile <path>"}),": Redirects telemetry output to a file. See ",(0,s.jsx)(n.a,{href:"#exporting-to-a-file",children:"Exporting to a file"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Environment variables:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"OTEL_EXPORTER_OTLP_ENDPOINT"}),": Overrides ",(0,s.jsx)(n.code,{children:"telemetry.otlpEndpoint"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["Workspace settings file (",(0,s.jsx)(n.code,{children:".gemini/settings.json"}),"):"]})," Values from the ",(0,s.jsx)(n.code,{children:"telemetry"})," object in this project-specific file."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["User settings file (",(0,s.jsx)(n.code,{children:"~/.gemini/settings.json"}),"):"]})," Values from the ",(0,s.jsx)(n.code,{children:"telemetry"})," object in this global user file."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Defaults:"})," applied if not set by any of the above."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"telemetry.enabled"}),": ",(0,s.jsx)(n.code,{children:"false"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"telemetry.target"}),": ",(0,s.jsx)(n.code,{children:"local"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"telemetry.otlpEndpoint"}),": ",(0,s.jsx)(n.code,{children:"http://localhost:4317"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"telemetry.logPrompts"}),": ",(0,s.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["For the ",(0,s.jsx)(n.code,{children:"npm run telemetry -- --target=<gcp|local>"})," script:"]}),"\nThe ",(0,s.jsx)(n.code,{children:"--target"})," argument to this script ",(0,s.jsx)(n.em,{children:"only"})," overrides the ",(0,s.jsx)(n.code,{children:"telemetry.target"})," for the duration and purpose of that script (i.e., choosing which collector to start). It does not permanently change your ",(0,s.jsx)(n.code,{children:"settings.json"}),". The script will first look at ",(0,s.jsx)(n.code,{children:"settings.json"})," for a ",(0,s.jsx)(n.code,{children:"telemetry.target"})," to use as its default."]}),"\n",(0,s.jsxs)(n.h3,{id:"example-settings",children:["Example settings",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#example-settings",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["The following code can be added to your workspace (",(0,s.jsx)(n.code,{children:".gemini/settings.json"}),") or user (",(0,s.jsx)(n.code,{children:"~/.gemini/settings.json"}),") settings to enable telemetry and send the output to Google Cloud:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "telemetry": {\n    "enabled": true,\n    "target": "gcp"\n  },\n  "tools": {\n    "sandbox": false\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"exporting-to-a-file",children:["Exporting to a file",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#exporting-to-a-file",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"You can export all telemetry data to a file for local inspection."}),"\n",(0,s.jsxs)(n.p,{children:["To enable file export, use the ",(0,s.jsx)(n.code,{children:"--telemetry-outfile"})," flag with a path to your desired output file. This must be run using ",(0,s.jsx)(n.code,{children:"--telemetry-target=local"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Set your desired output file path\nTELEMETRY_FILE=".gemini/telemetry.log"\n\n# Run Gemini CLI with local telemetry\n# NOTE: --telemetry-otlp-endpoint="" is required to override the default\n# OTLP exporter and ensure telemetry is written to the local file.\ngemini --telemetry \\\n  --telemetry-target=local \\\n  --telemetry-otlp-endpoint="" \\\n  --telemetry-outfile="$TELEMETRY_FILE" \\\n  --prompt "What is OpenTelemetry?"\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"running-an-otel-collector",children:["Running an OTEL Collector",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#running-an-otel-collector",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["An OTEL Collector is a service that receives, processes, and exports telemetry data.\nThe CLI can send data using either the OTLP/gRPC or OTLP/HTTP protocol.\nYou can specify which protocol to use via the ",(0,s.jsx)(n.code,{children:"--telemetry-otlp-protocol"})," flag\nor the ",(0,s.jsx)(n.code,{children:"telemetry.otlpProtocol"})," setting in your ",(0,s.jsx)(n.code,{children:"settings.json"})," file. See the\n",(0,s.jsx)(n.a,{href:"/cli/configuration#--telemetry-otlp-protocol",children:"configuration docs"})," for more\ndetails."]}),"\n",(0,s.jsxs)(n.p,{children:["Learn more about OTEL exporter standard configuration in ",(0,s.jsx)(n.a,{href:"https://opentelemetry.io/docs/languages/sdk-configuration/otlp-exporter/",target:"_blank",rel:"noopener noreferrer",children:"documentation"}),"."]}),"\n",(0,s.jsxs)(n.h3,{id:"local",children:["Local",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#local",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Use the ",(0,s.jsx)(n.code,{children:"npm run telemetry -- --target=local"})," command to automate the process of setting up a local telemetry pipeline, including configuring the necessary settings in your ",(0,s.jsx)(n.code,{children:".gemini/settings.json"})," file. The underlying script installs ",(0,s.jsx)(n.code,{children:"otelcol-contrib"})," (the OpenTelemetry Collector) and ",(0,s.jsx)(n.code,{children:"jaeger"})," (The Jaeger UI for viewing traces). To use it:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Run the command"}),":\nExecute the command from the root of the repository:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run telemetry -- --target=local\n"})}),"\n",(0,s.jsx)(n.p,{children:"The script will:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Download Jaeger and OTEL if needed."}),"\n",(0,s.jsx)(n.li,{children:"Start a local Jaeger instance."}),"\n",(0,s.jsx)(n.li,{children:"Start an OTEL collector configured to receive data from Gemini CLI."}),"\n",(0,s.jsx)(n.li,{children:"Automatically enable telemetry in your workspace settings."}),"\n",(0,s.jsx)(n.li,{children:"On exit, disable telemetry."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"View traces"}),":\nOpen your web browser and navigate to ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"http://localhost:16686",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:16686"})})," to access the Jaeger UI. Here you can inspect detailed traces of Gemini CLI operations."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Inspect logs and metrics"}),":\nThe script redirects the OTEL collector output (which includes logs and metrics) to ",(0,s.jsx)(n.code,{children:"~/.gemini/tmp/<projectHash>/otel/collector.log"}),". The script will provide links to view and a command to tail your telemetry data (traces, metrics, logs) locally."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Stop the services"}),":\nPress ",(0,s.jsx)(n.code,{children:"Ctrl+C"})," in the terminal where the script is running to stop the OTEL Collector and Jaeger services."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"google-cloud",children:["Google Cloud",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#google-cloud",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Use the ",(0,s.jsx)(n.code,{children:"npm run telemetry -- --target=gcp"})," command to automate setting up a local OpenTelemetry collector that forwards data to your Google Cloud project, including configuring the necessary settings in your ",(0,s.jsx)(n.code,{children:".gemini/settings.json"})," file. The underlying script installs ",(0,s.jsx)(n.code,{children:"otelcol-contrib"}),". To use it:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Prerequisites"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Have a Google Cloud project ID."}),"\n",(0,s.jsxs)(n.li,{children:["Export the ",(0,s.jsx)(n.code,{children:"GOOGLE_CLOUD_PROJECT"})," environment variable to make it available to the OTEL collector.","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'export OTLP_GOOGLE_CLOUD_PROJECT="your-project-id"\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Authenticate with Google Cloud (e.g., run ",(0,s.jsx)(n.code,{children:"gcloud auth application-default login"})," or ensure ",(0,s.jsx)(n.code,{children:"GOOGLE_APPLICATION_CREDENTIALS"})," is set)."]}),"\n",(0,s.jsx)(n.li,{children:'Ensure your Google Cloud account/service account has the necessary IAM roles: "Cloud Trace Agent", "Monitoring Metric Writer", and "Logs Writer".'}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Run the command"}),":\nExecute the command from the root of the repository:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run telemetry -- --target=gcp\n"})}),"\n",(0,s.jsx)(n.p,{children:"The script will:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Download the ",(0,s.jsx)(n.code,{children:"otelcol-contrib"})," binary if needed."]}),"\n",(0,s.jsx)(n.li,{children:"Start an OTEL collector configured to receive data from Gemini CLI and export it to your specified Google Cloud project."}),"\n",(0,s.jsxs)(n.li,{children:["Automatically enable telemetry and disable sandbox mode in your workspace settings (",(0,s.jsx)(n.code,{children:".gemini/settings.json"}),")."]}),"\n",(0,s.jsx)(n.li,{children:"Provide direct links to view traces, metrics, and logs in your Google Cloud Console."}),"\n",(0,s.jsx)(n.li,{children:"On exit (Ctrl+C), it will attempt to restore your original telemetry and sandbox settings."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Run Gemini CLI:"}),"\nIn a separate terminal, run your Gemini CLI commands. This generates telemetry data that the collector captures."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"View telemetry in Google Cloud"}),":\nUse the links provided by the script to navigate to the Google Cloud Console and view your traces, metrics, and logs."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Inspect local collector logs"}),":\nThe script redirects the local OTEL collector output to ",(0,s.jsx)(n.code,{children:"~/.gemini/tmp/<projectHash>/otel/collector-gcp.log"}),". The script provides links to view and command to tail your collector logs locally."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Stop the service"}),":\nPress ",(0,s.jsx)(n.code,{children:"Ctrl+C"})," in the terminal where the script is running to stop the OTEL Collector."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"logs-and-metric-reference",children:["Logs and metric reference",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#logs-and-metric-reference",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"The following section describes the structure of logs and metrics generated for Gemini CLI."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.code,{children:"sessionId"})," is included as a common attribute on all logs and metrics."]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"logs",children:["Logs",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#logs",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Logs are timestamped records of specific events. The following events are logged for Gemini CLI:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gemini_cli.config"}),": This event occurs once at startup with the CLI's configuration."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"model"})," (string)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"embedding_model"})," (string)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"sandbox_enabled"})," (boolean)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"core_tools_enabled"})," (string)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"approval_mode"})," (string)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"api_key_enabled"})," (boolean)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"vertex_ai_enabled"})," (boolean)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"code_assist_enabled"})," (boolean)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"log_prompts_enabled"})," (boolean)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"file_filtering_respect_git_ignore"})," (boolean)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"debug_mode"})," (boolean)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mcp_servers"})," (string)"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gemini_cli.user_prompt"}),": This event occurs when a user submits a prompt."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"prompt_length"})," (int)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"prompt_id"})," (string)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"prompt"})," (string, this attribute is excluded if ",(0,s.jsx)(n.code,{children:"log_prompts_enabled"})," is configured to be ",(0,s.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"auth_type"})," (string)"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gemini_cli.tool_call"}),": This event occurs for each function call."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"function_name"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"function_args"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"duration_ms"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"success"})," (boolean)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"decision"}),' (string: "accept", "reject", "auto_accept", or "modify", if applicable)']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"error"})," (if applicable)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"error_type"})," (if applicable)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"metadata"})," (if applicable, dictionary of string -> any)"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gemini_cli.file_operation"}),": This event occurs for each file operation."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tool_name"})," (string)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"operation"}),' (string: "create", "read", "update")']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"lines"})," (int, if applicable)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mimetype"})," (string, if applicable)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"extension"})," (string, if applicable)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"programming_language"})," (string, if applicable)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"diff_stat"})," (json string, if applicable): A JSON string with the following members:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ai_added_lines"})," (int)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ai_removed_lines"})," (int)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"user_added_lines"})," (int)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"user_removed_lines"})," (int)"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gemini_cli.api_request"}),": This event occurs when making a request to Gemini API."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"model"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"request_text"})," (if applicable)"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gemini_cli.api_error"}),": This event occurs if the API request fails."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"model"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"error"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"error_type"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"status_code"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"duration_ms"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"auth_type"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gemini_cli.api_response"}),": This event occurs upon receiving a response from Gemini API."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"model"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"status_code"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"duration_ms"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"error"})," (optional)"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"input_token_count"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"output_token_count"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"cached_content_token_count"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"thoughts_token_count"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"tool_token_count"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"response_text"})," (if applicable)"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"auth_type"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gemini_cli.malformed_json_response"}),": This event occurs when a ",(0,s.jsx)(n.code,{children:"generateJson"})," response from Gemini API cannot be parsed as a json."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"model"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gemini_cli.flash_fallback"}),": This event occurs when Gemini CLI switches to flash as fallback."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"auth_type"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gemini_cli.slash_command"}),": This event occurs when a user executes a slash command."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"command"})," (string)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"subcommand"})," (string, if applicable)"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"metrics",children:["Metrics",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#metrics",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Metrics are numerical measurements of behavior over time. The following metrics are collected for Gemini CLI:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gemini_cli.session.count"})," (Counter, Int): Incremented once per CLI startup."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gemini_cli.tool.call.count"})," (Counter, Int): Counts tool calls."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"function_name"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"success"})," (boolean)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"decision"}),' (string: "accept", "reject", or "modify", if applicable)']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tool_type"}),' (string: "mcp", or "native", if applicable)']}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gemini_cli.tool.call.latency"})," (Histogram, ms): Measures tool call latency."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"function_name"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"decision"}),' (string: "accept", "reject", or "modify", if applicable)']}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gemini_cli.api.request.count"})," (Counter, Int): Counts all API requests."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"model"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"status_code"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"error_type"})," (if applicable)"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gemini_cli.api.request.latency"})," (Histogram, ms): Measures API request latency."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"model"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gemini_cli.token.usage"})," (Counter, Int): Counts the number of tokens used."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"model"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"type"}),' (string: "input", "output", "thought", "cache", or "tool")']}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gemini_cli.file.operation.count"})," (Counter, Int): Counts file operations."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"operation"}),' (string: "create", "read", "update"): The type of file operation.']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"lines"})," (Int, if applicable): Number of lines in the file."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mimetype"})," (string, if applicable): Mimetype of the file."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"extension"})," (string, if applicable): File extension of the file."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"model_added_lines"})," (Int, if applicable): Number of lines added/changed by the model."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"model_removed_lines"})," (Int, if applicable): Number of lines removed/changed by the model."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"user_added_lines"})," (Int, if applicable): Number of lines added/changed by user in AI proposed changes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"user_removed_lines"})," (Int, if applicable): Number of lines removed/changed by user in AI proposed changes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"programming_language"})," (string, if applicable): The programming language of the file."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gemini_cli.chat_compression"})," (Counter, Int): Counts chat compression operations"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tokens_before"}),": (Int): Number of tokens in context prior to compression"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tokens_after"}),": (Int): Number of tokens in context after compression"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}let t=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["telemetry.md"]={toc:[{text:"Enabling telemetry",id:"enabling-telemetry",depth:2},{text:"Order of precedence",id:"order-of-precedence",depth:3},{text:"Example settings",id:"example-settings",depth:3},{text:"Exporting to a file",id:"exporting-to-a-file",depth:3},{text:"Running an OTEL Collector",id:"running-an-otel-collector",depth:2},{text:"Local",id:"local",depth:3},{text:"Google Cloud",id:"google-cloud",depth:3},{text:"Logs and metric reference",id:"logs-and-metric-reference",depth:2},{text:"Logs",id:"logs",depth:3},{text:"Metrics",id:"metrics",depth:3}],title:"Gemini CLI Observability Guide",headingTitle:"Gemini CLI Observability Guide",frontmatter:{}}}}]);
"use strict";(self.webpackChunklcm_test_page=self.webpackChunklcm_test_page||[]).push([["697"],{3111:function(e,n,i){i.r(n),i.d(n,{default:()=>c});var s=i(5893),r=i(65);function t(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",ol:"ol",li:"li",strong:"strong",code:"code",ul:"ul"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"vecli-architecture-overview",children:["VeCLI Architecture Overview",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vecli-architecture-overview",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"This document provides a high-level overview of the VeCLI's architecture."}),"\n",(0,s.jsxs)(n.h2,{id:"core-components",children:["Core components",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#core-components",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"The VeCLI is primarily composed of two main packages, along with a suite of tools that can be used by the system in the course of handling command-line input:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["CLI package (",(0,s.jsx)(n.code,{children:"packages/cli"}),"):"]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose:"})," This contains the user-facing portion of the VeCLI, such as handling the initial user input, presenting the final output, and managing the overall user experience."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key functions contained in the package:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/cli/commands",children:"Input processing"})}),"\n",(0,s.jsx)(n.li,{children:"History management"}),"\n",(0,s.jsx)(n.li,{children:"Display rendering"}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/cli/themes",children:"Theme and UI customization"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/cli/configuration",children:"CLI configuration settings"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Core package (",(0,s.jsx)(n.code,{children:"packages/core"}),"):"]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose:"})," This acts as the backend for the VeCLI. It receives requests sent from ",(0,s.jsx)(n.code,{children:"packages/cli"}),", orchestrates interactions with the Volcano Engine API, and manages the execution of available tools."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key functions contained in the package:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"API client for communicating with the Volcano Engine API"}),"\n",(0,s.jsx)(n.li,{children:"Prompt construction and management"}),"\n",(0,s.jsx)(n.li,{children:"Tool registration and execution logic"}),"\n",(0,s.jsx)(n.li,{children:"State management for conversations or sessions"}),"\n",(0,s.jsx)(n.li,{children:"Server-side configuration"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Tools (",(0,s.jsx)(n.code,{children:"packages/core/src/tools/"}),"):"]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose:"})," These are individual modules that extend the capabilities of the Volcano Engine model, allowing it to interact with the local environment (e.g., file system, shell commands, web fetching)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Interaction:"})," ",(0,s.jsx)(n.code,{children:"packages/core"})," invokes these tools based on requests from the Volcano Engine model."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"interaction-flow",children:["Interaction Flow",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#interaction-flow",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"A typical interaction with the VeCLI follows this flow:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"User input:"})," The user types a prompt or command into the terminal, which is managed by ",(0,s.jsx)(n.code,{children:"packages/cli"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Request to core:"})," ",(0,s.jsx)(n.code,{children:"packages/cli"})," sends the user's input to ",(0,s.jsx)(n.code,{children:"packages/core"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Request processed:"})," The core package:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Constructs an appropriate prompt for the Volcano Engine API, possibly including conversation history and available tool definitions."}),"\n",(0,s.jsx)(n.li,{children:"Sends the prompt to the Volcano Engine API."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Volcano Engine API response:"})," The Volcano Engine API processes the prompt and returns a response. This response might be a direct answer or a request to use one of the available tools."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tool execution (if applicable):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"When the Volcano Engine API requests a tool, the core package prepares to execute it."}),"\n",(0,s.jsx)(n.li,{children:"If the requested tool can modify the file system or execute shell commands, the user is first given details of the tool and its arguments, and the user must approve the execution."}),"\n",(0,s.jsx)(n.li,{children:"Read-only operations, such as reading files, might not require explicit user confirmation to proceed."}),"\n",(0,s.jsx)(n.li,{children:"Once confirmed, or if confirmation is not required, the core package executes the relevant action within the relevant tool, and the result is sent back to the Volcano Engine API by the core package."}),"\n",(0,s.jsx)(n.li,{children:"The Volcano Engine API processes the tool result and generates a final response."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Response to CLI:"})," The core package sends the final response back to the CLI package."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Display to user:"})," The CLI package formats and displays the response to the user in the terminal."]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"key-design-principles",children:["Key Design Principles",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#key-design-principles",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Modularity:"})," Separating the CLI (frontend) from the Core (backend) allows for independent development and potential future extensions (e.g., different frontends for the same backend)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Extensibility:"})," The tool system is designed to be extensible, allowing new capabilities to be added."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"User experience:"})," The CLI focuses on providing a rich and interactive terminal experience."]}),"\n"]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}let c=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["architecture.md"]={toc:[{text:"Core components",id:"core-components",depth:2},{text:"Interaction Flow",id:"interaction-flow",depth:2},{text:"Key Design Principles",id:"key-design-principles",depth:2}],title:"VeCLI Architecture Overview",headingTitle:"VeCLI Architecture Overview",frontmatter:{}}}}]);
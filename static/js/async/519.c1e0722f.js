"use strict";(self.webpackChunklcm_test_page=self.webpackChunklcm_test_page||[]).push([["519"],{6334:function(e,n,i){i.r(n),i.d(n,{default:()=>c});var s=i(5893),l=i(65);function d(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",code:"code",h2:"h2",ul:"ul",li:"li",pre:"pre",em:"em"},(0,l.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"vecli-文件系统工具",children:["VeCLI 文件系统工具",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vecli-文件系统工具",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"VeCLI 提供了一套全面的工具来与本地文件系统进行交互。这些工具允许火山引擎模型在您的控制下读取、写入、列出、搜索和修改文件及目录，并且对于敏感操作通常需要您的确认。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"注意:"})," 出于安全考虑，所有文件系统工具都在一个 ",(0,s.jsx)(n.code,{children:"rootDirectory"}),"（通常是您启动 CLI 的当前工作目录）内运行。您提供给这些工具的路径通常应为绝对路径，或者相对于此根目录进行解析。"]}),"\n",(0,s.jsxs)(n.h2,{id:"1-list_directory-readfolder",children:["1. ",(0,s.jsx)(n.code,{children:"list_directory"})," (ReadFolder)",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-list_directory-readfolder",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"list_directory"})," 列出指定目录路径内直接包含的文件和子目录的名称。它可以选择性地忽略与提供的 glob 模式匹配的条目。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"工具名称:"})," ",(0,s.jsx)(n.code,{children:"list_directory"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"显示名称:"})," ReadFolder"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"文件:"})," ",(0,s.jsx)(n.code,{children:"ls.ts"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"参数:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"path"})," (字符串, 必需): 要列出的目录的绝对路径。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ignore"})," (字符串数组, 可选): 要从列表中排除的 glob 模式列表 (例如, ",(0,s.jsx)(n.code,{children:'["*.log", ".git"]'}),")。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"respect_git_ignore"})," (布尔值, 可选): 列出文件时是否遵守 ",(0,s.jsx)(n.code,{children:".gitignore"})," 模式。默认为 ",(0,s.jsx)(n.code,{children:"true"}),"。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"行为:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"返回文件和目录名称的列表。"}),"\n",(0,s.jsx)(n.li,{children:"指示每个条目是否为目录。"}),"\n",(0,s.jsx)(n.li,{children:"将条目排序，目录在前，然后按字母顺序排列。"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["输出 (",(0,s.jsx)(n.code,{children:"llmContent"}),"):"]})," 类似于以下的字符串: ",(0,s.jsx)(n.code,{children:"Directory listing for /path/to/your/folder:\\n[DIR] subfolder1\\nfile1.txt\\nfile2.png"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"确认:"})," 否。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"2-read_file-readfile",children:["2. ",(0,s.jsx)(n.code,{children:"read_file"})," (ReadFile)",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-read_file-readfile",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"read_file"})," 读取并返回指定文件的内容。此工具处理文本、图像（PNG、JPG、GIF、WEBP、SVG、BMP）和 PDF 文件。对于文本文件，它可以读取特定的行范围。其他二进制文件类型通常会被跳过。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"工具名称:"})," ",(0,s.jsx)(n.code,{children:"read_file"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"显示名称:"})," ReadFile"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"文件:"})," ",(0,s.jsx)(n.code,{children:"read-file.ts"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"参数:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"path"})," (字符串, 必需): 要读取的文件的绝对路径。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"offset"})," (数字, 可选): 对于文本文件，从 0 开始的行号，表示从哪一行开始读取。需要设置 ",(0,s.jsx)(n.code,{children:"limit"}),"。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"limit"})," (数字, 可选): 对于文本文件，要读取的最大行数。如果省略，则读取默认最大值（例如，2000 行）或在可行的情况下读取整个文件。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"行为:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["对于文本文件: 返回内容。如果使用了 ",(0,s.jsx)(n.code,{children:"offset"})," 和 ",(0,s.jsx)(n.code,{children:"limit"}),"，则仅返回该行范围的内容。如果由于行限制或行长限制而截断了内容，则会进行指示。"]}),"\n",(0,s.jsx)(n.li,{children:"对于图像和 PDF 文件: 将文件内容作为 base64 编码的数据结构返回，适用于模型处理。"}),"\n",(0,s.jsx)(n.li,{children:"对于其他二进制文件: 尝试识别并跳过它们，返回一条消息，表明这是一个通用的二进制文件。"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"输出:"})," (",(0,s.jsx)(n.code,{children:"llmContent"}),"):","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["对于文本文件: 文件内容，可能会带有截断消息前缀（例如，",(0,s.jsx)(n.code,{children:"[File content truncated: showing lines 1-100 of 500 total lines...]\\nActual file content..."}),"）。"]}),"\n",(0,s.jsxs)(n.li,{children:["对于图像/PDF 文件: 一个包含 ",(0,s.jsx)(n.code,{children:"inlineData"})," 的对象，其中包含 ",(0,s.jsx)(n.code,{children:"mimeType"})," 和 base64 ",(0,s.jsx)(n.code,{children:"data"}),"（例如，",(0,s.jsx)(n.code,{children:"{ inlineData: { mimeType: 'image/png', data: 'base64encodedstring' } }"}),"）。"]}),"\n",(0,s.jsxs)(n.li,{children:["对于其他二进制文件: 类似于 ",(0,s.jsx)(n.code,{children:"Cannot display content of binary file: /path/to/data.bin"})," 的消息。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"确认:"})," 否。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"3-write_file-writefile",children:["3. ",(0,s.jsx)(n.code,{children:"write_file"})," (WriteFile)",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-write_file-writefile",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"write_file"})," 将内容写入指定的文件。如果文件存在，它将被覆盖。如果文件不存在，则会创建该文件（以及任何必要的父目录）。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"工具名称:"})," ",(0,s.jsx)(n.code,{children:"write_file"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"显示名称:"})," WriteFile"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"文件:"})," ",(0,s.jsx)(n.code,{children:"write-file.ts"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"参数:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"file_path"})," (字符串, 必需): 要写入的文件的绝对路径。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"content"})," (字符串, 必需): 要写入文件的内容。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"行为:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["将提供的 ",(0,s.jsx)(n.code,{children:"content"})," 写入 ",(0,s.jsx)(n.code,{children:"file_path"}),"。"]}),"\n",(0,s.jsx)(n.li,{children:"如果父目录不存在，则创建它们。"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["输出 (",(0,s.jsx)(n.code,{children:"llmContent"}),"):"]})," 成功消息，例如，",(0,s.jsx)(n.code,{children:"Successfully overwrote file: /path/to/your/file.txt"})," 或 ",(0,s.jsx)(n.code,{children:"Successfully created and wrote to new file: /path/to/new/file.txt"}),"。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"确认:"})," 是。在写入之前，会显示更改的差异并请求用户批准。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"4-glob-findfiles",children:["4. ",(0,s.jsx)(n.code,{children:"glob"})," (FindFiles)",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-glob-findfiles",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"glob"})," 查找与特定 glob 模式匹配的文件（例如，",(0,s.jsx)(n.code,{children:"src/**/*.ts"}),"、",(0,s.jsx)(n.code,{children:"*.md"}),"），返回按修改时间排序的绝对路径（最新的在前）。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"工具名称:"})," ",(0,s.jsx)(n.code,{children:"glob"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"显示名称:"})," FindFiles"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"文件:"})," ",(0,s.jsx)(n.code,{children:"glob.ts"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"参数:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pattern"})," (字符串, 必需): 要匹配的 glob 模式（例如，",(0,s.jsx)(n.code,{children:'"*.py"'}),"、",(0,s.jsx)(n.code,{children:'"src/**/*.js"'}),"）。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"path"})," (字符串, 可选): 要在其中搜索的目录的绝对路径。如果省略，则在工具的根目录中搜索。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"case_sensitive"})," (布尔值, 可选): 搜索是否区分大小写。默认为 ",(0,s.jsx)(n.code,{children:"false"}),"。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"respect_git_ignore"})," (布尔值, 可选): 查找文件时是否遵守 .gitignore 模式。默认为 ",(0,s.jsx)(n.code,{children:"true"}),"。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"行为:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"在指定目录中搜索与 glob 模式匹配的文件。"}),"\n",(0,s.jsx)(n.li,{children:"返回绝对路径列表，按最近修改的文件优先排序。"}),"\n",(0,s.jsxs)(n.li,{children:["默认情况下忽略常见的干扰目录，如 ",(0,s.jsx)(n.code,{children:"node_modules"})," 和 ",(0,s.jsx)(n.code,{children:".git"}),"。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["输出 (",(0,s.jsx)(n.code,{children:"llmContent"}),"):"]})," 类似于以下的消息: ",(0,s.jsx)(n.code,{children:'Found 5 file(s) matching "*.ts" within src, sorted by modification time (newest first):\\nsrc/file1.ts\\nsrc/subdir/file2.ts...'})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"确认:"})," 否。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"5-search_file_content-searchtext",children:["5. ",(0,s.jsx)(n.code,{children:"search_file_content"})," (SearchText)",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-search_file_content-searchtext",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"search_file_content"})," 在指定目录中的文件内容中搜索正则表达式模式。可以按 glob 模式过滤文件。返回包含匹配项的行，以及它们的文件路径和行号。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"工具名称:"})," ",(0,s.jsx)(n.code,{children:"search_file_content"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"显示名称:"})," SearchText"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"文件:"})," ",(0,s.jsx)(n.code,{children:"grep.ts"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"参数:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pattern"})," (字符串, 必需): 要搜索的正则表达式 (regex)（例如，",(0,s.jsx)(n.code,{children:'"function\\\\s+myFunction"'}),"）。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"path"})," (字符串, 可选): 要在其中搜索的目录的绝对路径。默认为当前工作目录。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"include"})," (字符串, 可选): 用于过滤要搜索的文件的 glob 模式（例如，",(0,s.jsx)(n.code,{children:'"*.js"'}),"、",(0,s.jsx)(n.code,{children:'"src/**/*.{ts,tsx}"'}),"）。如果省略，则搜索大多数文件（遵守常见的忽略规则）。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"行为:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["如果在 Git 仓库中可用，则使用 ",(0,s.jsx)(n.code,{children:"git grep"})," 以提高速度；否则，回退到系统 ",(0,s.jsx)(n.code,{children:"grep"})," 或基于 JavaScript 的搜索。"]}),"\n",(0,s.jsx)(n.li,{children:"返回匹配行的列表，每行都带有其文件路径（相对于搜索目录）和行号前缀。"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["输出 (",(0,s.jsx)(n.code,{children:"llmContent"}),"):"]})," 格式化的匹配项字符串，例如:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'Found 3 matches for pattern "myFunction" in path "." (filter: "*.ts"):\n---\nFile: src/utils.ts\nL15: export function myFunction() {\nL22:   myFunction.call();\n---\nFile: src/index.ts\nL5: import { myFunction } from \'./utils\';\n---\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"确认:"})," 否。"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"6-replace-edit",children:["6. ",(0,s.jsx)(n.code,{children:"replace"})," (Edit)",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-replace-edit",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"replace"})," 替换文件中的文本。默认情况下，替换单个匹配项，但如果指定了 ",(0,s.jsx)(n.code,{children:"expected_replacements"}),"，则可以替换多个匹配项。此工具旨在进行精确、有针对性的更改，并且需要 ",(0,s.jsx)(n.code,{children:"old_string"})," 周围有大量上下文，以确保修改正确的位置。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"工具名称:"})," ",(0,s.jsx)(n.code,{children:"replace"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"显示名称:"})," Edit"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"文件:"})," ",(0,s.jsx)(n.code,{children:"edit.ts"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"参数:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"file_path"})," (字符串, 必需): 要修改的文件的绝对路径。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"old_string"})," (字符串, 必需): 要替换的确切文字文本。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"关键:"})," 此字符串必须唯一标识要更改的单个实例。它应包含目标文本 ",(0,s.jsx)(n.em,{children:"之前"})," 和 ",(0,s.jsx)(n.em,{children:"之后"})," 至少 3 行的上下文，并且必须精确匹配空格和缩进。如果 ",(0,s.jsx)(n.code,{children:"old_string"})," 为空，则该工具会尝试在 ",(0,s.jsx)(n.code,{children:"file_path"})," 创建一个新文件，并将 ",(0,s.jsx)(n.code,{children:"new_string"})," 作为内容。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"new_string"})," (字符串, 必需): 要替换 ",(0,s.jsx)(n.code,{children:"old_string"})," 的确切文字文本。"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"expected_replacements"})," (数字, 可选): 要替换的匹配项数量。默认为 ",(0,s.jsx)(n.code,{children:"1"}),"。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"行为:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["如果 ",(0,s.jsx)(n.code,{children:"old_string"})," 为空且 ",(0,s.jsx)(n.code,{children:"file_path"})," 不存在，则创建一个新文件，并将 ",(0,s.jsx)(n.code,{children:"new_string"})," 作为内容。"]}),"\n",(0,s.jsxs)(n.li,{children:["如果提供了 ",(0,s.jsx)(n.code,{children:"old_string"}),"，则读取 ",(0,s.jsx)(n.code,{children:"file_path"})," 并尝试找到 ",(0,s.jsx)(n.code,{children:"old_string"})," 的唯一匹配项。"]}),"\n",(0,s.jsxs)(n.li,{children:["如果找到一个匹配项，则将其替换为 ",(0,s.jsx)(n.code,{children:"new_string"}),"。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"增强可靠性（多阶段编辑校正）:"})," 为了显著提高编辑的成功率，尤其是在模型提供的 ",(0,s.jsx)(n.code,{children:"old_string"})," 可能不完全精确的情况下，该工具结合了多阶段编辑校正机制。","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["如果初始的 ",(0,s.jsx)(n.code,{children:"old_string"})," 未找到或匹配多个位置，则该工具可以利用火山引擎模型迭代地改进 ",(0,s.jsx)(n.code,{children:"old_string"}),"（以及可能的 ",(0,s.jsx)(n.code,{children:"new_string"}),"）。"]}),"\n",(0,s.jsxs)(n.li,{children:["这种自我校正过程会尝试识别模型打算修改的唯一段落，即使初始上下文稍有不完美，也能使 ",(0,s.jsx)(n.code,{children:"replace"})," 操作更加稳健。"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"失败条件:"})," 尽管有校正机制，但如果出现以下情况，该工具仍会失败："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"file_path"})," 不是绝对路径或在根目录之外。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"old_string"})," 不为空，但 ",(0,s.jsx)(n.code,{children:"file_path"})," 不存在。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"old_string"})," 为空，但 ",(0,s.jsx)(n.code,{children:"file_path"})," 已存在。"]}),"\n",(0,s.jsxs)(n.li,{children:["尝试校正后，在文件中仍未找到 ",(0,s.jsx)(n.code,{children:"old_string"}),"。"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"old_string"})," 找到多个匹配项，且自我校正机制无法将其解析为单个、明确的匹配项。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["输出 (",(0,s.jsx)(n.code,{children:"llmContent"}),"):"]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["成功时: ",(0,s.jsx)(n.code,{children:"Successfully modified file: /path/to/file.txt (1 replacements)."})," 或 ",(0,s.jsx)(n.code,{children:"Created new file: /path/to/new_file.txt with provided content."})]}),"\n",(0,s.jsxs)(n.li,{children:["失败时: 解释原因的错误消息（例如，",(0,s.jsx)(n.code,{children:"Failed to edit, 0 occurrences found..."}),"、",(0,s.jsx)(n.code,{children:"Failed to edit, expected 1 occurrences but found 2..."}),"）。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"确认:"})," 是。在写入文件之前，会显示建议的更改差异并请求用户批准。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"这些文件系统工具为 VeCLI 提供了理解和与您的本地项目上下文交互的基础。"})]})}function r(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}let c=r;r.__RSPRESS_PAGE_META={},r.__RSPRESS_PAGE_META["zh%2Ftools%2Ffile-system.md"]={toc:[{text:"1. `list_directory` (ReadFolder)",id:"1-list_directory-readfolder",depth:2},{text:"2. `read_file` (ReadFile)",id:"2-read_file-readfile",depth:2},{text:"3. `write_file` (WriteFile)",id:"3-write_file-writefile",depth:2},{text:"4. `glob` (FindFiles)",id:"4-glob-findfiles",depth:2},{text:"5. `search_file_content` (SearchText)",id:"5-search_file_content-searchtext",depth:2},{text:"6. `replace` (Edit)",id:"6-replace-edit",depth:2}],title:"VeCLI 文件系统工具",headingTitle:"VeCLI 文件系统工具",frontmatter:{}}}}]);